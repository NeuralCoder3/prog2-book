{"version":3,"file":"882.8559584432e9964d.bundle.js","mappings":"mIAiBA,SAASA,EAAcC,EAAUC,GAC7B,IAAIC,EAAK,IAAI,IACbF,EAASG,QAAQC,KAAK,kBAAkBC,OAAM,WAC1CH,EAAGI,aAAa,CAAEC,MAAO,WAAYC,IAAK,QAASC,OAAQR,GAC/D,IACAD,EAASG,QAAQC,KAAK,iBAAiBC,OAAM,WACzCH,EAAGI,aAAa,CAAEC,MAAO,WAAYC,IAAK,OAAQC,OAAQR,GAC9D,IACAD,EAASG,QAAQC,KAAK,gBAAgBC,OAAM,WACxCH,EAAGI,aAAa,CAAEC,MAAO,WAAYC,IAAK,OAAQC,OAAQR,GAC9D,IACAD,EAASG,QAAQC,KAAK,eAAeC,OAAM,WACvCH,EAAGI,aAAa,CAAEC,MAAO,WAAYC,IAAK,MAAOC,OAAQR,GAC7D,IACAD,EAASG,QAAQC,KAAK,oBAAoBM,KAAK,SAAS,SAAUC,EAAKC,GACnEV,EAAGI,aAAa,CAAEC,MAAO,WAAYC,IAAK,QAASC,OAAQR,GAC/D,IAEAC,EAAGW,aAAeC,SAASC,eAAed,GAC1CC,EAAGc,0BACP,CAEA,SAASC,EAAahB,GAClB,IAAIiB,EAAQC,EAAE,IAAMlB,GACpBkB,EAAED,GAAOd,KAAK,kBAAkBgB,SAAS,mBACzCD,EAAED,GAAOd,KAAK,gBAAgBgB,SAAS,kBACvCD,EAAED,GAAOd,KAAK,eAAegB,SAAS,mBACtCD,EAAED,GAAOd,KAAK,iBAAiBgB,SAAS,kBAC5C,C,SAE6B,oBAAlBC,gBACPC,OAAOC,eAAiB,IAwD5BJ,GAAE,WACE,GAA4B,oBAAjBK,aAA8B,CACrC,IAAK,IAAIvB,KAASuB,aAAc,CAC5B,IAAIC,EAAKX,SAASC,eAAed,GAC7ByB,EAAOP,EAAEM,GAAIE,KAAK,UAAUD,KAC5BE,EAAMT,EAAEM,GAAIE,KAAK,UAAUC,KAC3BA,GAASA,EAAIC,WAAW,SAAWD,EAAIC,WAAW,OAClDD,OAAME,GAEGN,aAAavB,GAAa,KACvC,IAAI8B,EAAS,CACTC,oBAAqB,EACrBC,gBAAiB,KACjBC,UAAU,EACVR,KAAMA,EACNE,IAAKA,GAKT,IACI,IAAIO,EAAMC,oBAAoBZ,aAAavB,GAAQA,EAAO8B,GAC1DhC,EAAcoC,EAAKlC,GACnBgB,EAAahB,GACbqB,OAAOC,eAAec,KAAKF,EAI/B,CAHE,MAAOG,GACLC,QAAQC,IAAI,oCAAoCvC,KAChDsC,QAAQC,IAAIF,EAChB,CACJ,CACAhB,OAAOmB,iBAAiB,mBAAmB,SAAU9B,IACxC,IAAI,KACVL,aAAa,CACZC,MAAO,WACPE,OAAQE,EAAI+B,OAAOzC,MACnBO,IAAK,UAAUG,EAAI+B,OAAOC,SAC1BC,QAASjC,EAAI+B,OAAOE,UAExBL,QAAQC,IAAI7B,EAChB,GACJ,CACJ,G","sources":["webpack://WebComponents/./runestone/codelens/js/codelens.js"],"sourcesContent":["/**\n * Created by bmiller on 5/10/15.\n */\n\n/*\n Since I don't want to modify the codelens code I'll attach the logging functionality this way.\n This actually seems like a better way to do it maybe across the board to separate logging\n from the real funcionality.  It would also allow a better way of turning off/on logging..\n As long as Philip doesn't go and change the id values for the buttons and slider this will\n continue to work.... In the best of all worlds we might add a function to the visualizer to\n return the buttons, but I'm having a hard time thinking of any other use for that besides mine.\n */\n\nimport RunestoneBase from \"../../common/js/runestonebase.js\";\nimport \"./pytutor-embed.bundle.js\";\nimport \"./../css/pytutor.css\";\n\nfunction attachLoggers(codelens, divid) {\n    let rb = new RunestoneBase();\n    codelens.domRoot.find(\"#jmpFirstInstr\").click(function () {\n        rb.logBookEvent({ event: \"codelens\", act: \"first\", div_id: divid });\n    });\n    codelens.domRoot.find(\"#jmpLastInstr\").click(function () {\n        rb.logBookEvent({ event: \"codelens\", act: \"last\", div_id: divid });\n    });\n    codelens.domRoot.find(\"#jmpStepBack\").click(function () {\n        rb.logBookEvent({ event: \"codelens\", act: \"back\", div_id: divid });\n    });\n    codelens.domRoot.find(\"#jmpStepFwd\").click(function () {\n        rb.logBookEvent({ event: \"codelens\", act: \"fwd\", div_id: divid });\n    });\n    codelens.domRoot.find(\"#executionSlider\").bind(\"slide\", function (evt, ui) {\n        rb.logBookEvent({ event: \"codelens\", act: \"slide\", div_id: divid });\n    });\n    // TODO: The component isn't quite fully initialized, but it also doesn't inherit from RunestoneBase. This is a convenient place to mark it ready for now, but it should be moved forward in time during a rewrite.\n    rb.containerDiv = document.getElementById(divid);\n    rb.indicate_component_ready();\n}\n\nfunction styleButtons(divid) {\n    var myVis = $(\"#\" + divid);\n    $(myVis).find(\"#jmpFirstInstr\").addClass(\"btn btn-default\");\n    $(myVis).find(\"#jmpStepBack\").addClass(\"btn btn-danger\");\n    $(myVis).find(\"#jmpStepFwd\").addClass(\"btn btn-success\");\n    $(myVis).find(\"#jmpLastInstr\").addClass(\"btn btn-default\");\n}\n\nif (typeof allVsualizers === \"undefined\") {\n    window.allVisualizers = [];\n}\n\n\nasync function iframeCode() {\n    var cl = this.codelens.firstChild;\n    if (cl) {\n        this.codelens.removeChild(cl);\n    }\n    var code = await this.buildProg(false);\n    var myVars = {};\n    myVars.code = code;\n    myVars.origin = \"opt-frontend.js\";\n    myVars.cumulative = false;\n    myVars.heapPrimitives = false;\n    myVars.drawParentPointers = false;\n    myVars.textReferences = false;\n    myVars.showOnlyOutputs = false;\n    myVars.rawInputLstJSON = JSON.stringify([]);\n    if (this.language == \"python\") {\n        if (this.python3) {\n            myVars.py = 3;\n        } else {\n            myVars.py = 2;\n        }\n    } else if (this.langauge == \"javascript\") {\n        myVars.py = \"js\";\n    } else {\n        myVars.py = this.language;\n    }\n    myVars.curInstr = 0;\n    myVars.codeDivWidth = 350;\n    myVars.codeDivHeight = 400;\n    // var srcURL = \"https://pythontutor.com/iframe-embed.html\";\n    var srcURL = (\n        this.url || \"https://pythontutor.com/iframe-embed.html\"\n    );\n    var srcVars = $.param(myVars);\n    var embedUrlStr = `${srcURL}#${srcVars}`;\n    var myIframe = document.createElement(\"iframe\");\n    myIframe.setAttribute(\"id\", this.divid + \"_codelens\");\n    myIframe.setAttribute(\"width\", \"100%\");\n    myIframe.setAttribute(\"height\", \"500\");\n    myIframe.setAttribute(\"style\", \"display:block\");\n    myIframe.style.background = \"#fff\";\n    //myIframe.setAttribute(\"src\",srcURL)\n    myIframe.src = embedUrlStr;\n    this.codelens.appendChild(myIframe);\n    this.logBookEvent({\n        event: \"codelens\",\n        act: \"view\",\n        div_id: this.divid,\n    });\n}\n\n\n$(function () {\n    if (typeof allTraceData !== \"undefined\") {\n        for (let divid in allTraceData) {\n            let cl = document.getElementById(divid);\n            let lang = $(cl).data(\"params\").lang;\n            let url = $(cl).data(\"params\").url;\n            if (url && !(url.startsWith(\"http\") || url.startsWith(\"/\"))) {\n                url = undefined;\n            }\n            const code = allTraceData[divid][\"code\"];\n            let params = {\n                startingInstruction: 0,\n                editCodeBaseURL: null,\n                hideCode: false,\n                lang: lang,\n                url: url,\n            };\n            // if (\"url\" in meta_json) {\n            //     params.editCodeBaseURL = meta_json.url;\n            // }\n            try {\n                let vis = addVisualizerToPage(allTraceData[divid], divid, params);\n                attachLoggers(vis, divid);\n                styleButtons(divid);\n                window.allVisualizers.push(vis);\n            } catch (err) {\n                console.log(`Error rendering CodeLens Problem ${divid}`);\n                console.log(err);\n            }\n        }\n        window.addEventListener(\"codelens:answer\", function (evt) {\n            let rb = new RunestoneBase();\n            rb.logBookEvent({\n                event: \"codelens\",\n                div_id: evt.detail.divid,\n                act: `answer:${evt.detail.answer}`,\n                correct: evt.detail.correct,\n            });\n            console.log(evt);\n        });\n    }\n});\n"],"names":["attachLoggers","codelens","divid","rb","domRoot","find","click","logBookEvent","event","act","div_id","bind","evt","ui","containerDiv","document","getElementById","indicate_component_ready","styleButtons","myVis","$","addClass","allVsualizers","window","allVisualizers","allTraceData","cl","lang","data","url","startsWith","undefined","params","startingInstruction","editCodeBaseURL","hideCode","vis","addVisualizerToPage","push","err","console","log","addEventListener","detail","answer","correct"],"sourceRoot":""}